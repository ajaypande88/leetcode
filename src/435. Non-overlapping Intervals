Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.
Example 1:
Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.


Solution:
we have to sort the intervals on the basis of thier end points,then use a greeady approach to find the answer.

If p is ending after the start of current element, we eliminate the current element but not the element contained in
p because the elements are sorted according to their end points and p will have a lesser end point than the current element.
So we eliminate current element to reduce the probability of overlapping with next element.

Why do we sort on the basis of end points, not on start points?

Suppose you have cases like : (1,8), (2,3), (3,4), (5,9)
If you sort in the basis of start points you will end up considering (1,8) and deleting rest which collide with (1,8).
For a greedy approach you will want the point with lower end point to be considered.
But, We can sort on the basis of start point also, just a little tweak in the algorithm will work out that way. 
In case of overlap, remove the interval having the farther end point.
